(defun createFile()	; Create a file as 161044014.tree
	(with-open-file (stream "161044014.tree" :direction :output :if-exists :supersede :if-does-not-exist :create)
		(format stream "; DIRECTIVE: identify")
		(terpri stream)
		(format stream "START")		
		(terpri stream)
		(format stream "INPUT")
		(terpri stream)
	)
)


(defun parser (ls)	;Parser func
	(createFile)
	(ident ls)
)

(defun ident(ls)
	(if (null ls)
		NIL
		(progn
		(setq ls (cdr ls))
		(with-open-file (stream "161044014.tree" :direction :output :if-exists :append :if-does-not-exist :create)
		(cond
			((string= (car(cdr(car ls)))  "concat")			
				(format stream "EXPLISTI -> (concat EXPLISTI EXPLISTI)")
			)
			((string= (car(cdr(car ls))) "append")			
				(format stream "EXPLISTI -> (append EXPI EXPLISTI)")
			)
			((string= (car(cdr(car ls)))  "null")			
				(format stream "EXPLISTI -> null")
			)
			((string= (car(cdr(car ls)))  "‘")			
				(format stream "EXPLISTI -> ‘(VALUES)")
			)
			((string= (car(cdr(car ls)))  "set")			
				(format stream "EXPI ->(set ID EXPI)")
			)
			((string= (car(cdr(car ls)))  "+")			
				(format stream "EXPI -> (+ EXPI EXPI)")
			)
			((string= (car(cdr(car ls)))  "-")			
				(format stream "EXPI -> (- EXPI EXPI)")
			)
			((string= (car(cdr(car ls)))  "*")			
				(format stream "EXPI -> (* EXPI EXPI)")
			)
			((string= (car(cdr(car ls)))  "/")			
				(format stream "EXPI -> (/ EXPI EXPI)")
			)
			((string= (car(cdr(car ls)))  "deffun")			
				(format stream "EXPI -> (deffun ID IDLIST EXPLISTI)")
			)
			((string= (car(car ls))  "identifier")
				(if (string= (car(car(cdr ls))) ")")
					(format stream "EXPI -> ID")	
					(format stream "EXPI -> (ID EXPLISTI)")
				)
			)
			((string= (car(cdr(car ls)))  "defvar")			
				(format stream "EXPI -> (defvar ID EXPI)")
			)	
			((string= (car(cdr(car ls)))  "if")			
				(format stream "EXPI -> (if EXPB EXPLISTI EXPLISTI)")
			)	
			((string= (car(cdr(car ls)))  "while")			
				(format stream "EXPI -> (while (EXPB) EXPLISTI)")
			)
			((string= (car(cdr(car ls)))  "for")			
				(format stream "EXPI -> (for (ID EXPI EXPI) EXPLISTI)")
			)
			((numberp (car(cdr(car ls))))			
				(format stream "EXPI -> VALUES")
			)				
		)
		)
		)
	)
)	